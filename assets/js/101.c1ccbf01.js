(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{276:function(t,a,e){"use strict";e.r(a);var s=e(1),r=Object(s.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"chapter-9-일반적인-프로그래밍-원칙"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chapter-9-일반적인-프로그래밍-원칙","aria-hidden":"true"}},[t._v("#")]),t._v(" Chapter 9 일반적인 프로그래밍 원칙")]),t._v(" "),e("h2",{attrs:{id:"item-57-지역변수의-범위를-최소화하라"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#item-57-지역변수의-범위를-최소화하라","aria-hidden":"true"}},[t._v("#")]),t._v(" Item 57 지역변수의 범위를 최소화하라")]),t._v(" "),e("p",[t._v("지역변수의 범위를 줄이는데 가장 강력한 기법은 "),e("em",[e("strong",[t._v("가장 처음 쓰일 때 선언하기")])]),t._v(" 이다.")]),t._v(" "),e("p",[t._v("거의 모든 지역변수는 선언과 동시에 초기화 해야 한다.")]),t._v(" "),e("p",[e("code",[t._v("try-catch")]),t._v(" 블록에서는 예외이다.")]),t._v(" "),e("p",[t._v("변수를 초기화 하는 표현식에서 검사 예외를 던질 가능성이 있다면 try 블록 안에서 초기화 해야 한다. (그렇지 않으면 예외가 블록 바깥으로 전파될 가능성이 있다.)")]),t._v(" "),e("p",[t._v("변수의 값을 try 바깥에서도 사용해야 한다면 try 블록 앞에서 선언해야 한다.")]),t._v(" "),e("p",[t._v("반복자를 써야할 경우라면 "),e("code",[t._v("while")]),t._v(" 구문보다는 "),e("code",[t._v("for")]),t._v(" 구문을 사용하여 지역변수를 제한하고 메서드는 가능한 작게 유지하며 한가지 기능에만 집중해야 한다.")]),t._v(" "),e("h2",{attrs:{id:"item-58-전통적인-for-문보다는-for-each-문을-사용하라"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#item-58-전통적인-for-문보다는-for-each-문을-사용하라","aria-hidden":"true"}},[t._v("#")]),t._v(" Item 58 전통적인 for 문보다는 for-each 문을 사용하라.")]),t._v(" "),e("p",[e("code",[t._v("for-each")]),t._v(" 의 정식 명칭은 "),e("em",[e("strong",[t._v("향상된 for 문 (enhanced for statement)")])]),t._v(" 이며 반복자와 인덱스 변수를 사용하지 않으니 코드가 깔끔해지고 오류가 날 일도 적다.")]),t._v(" "),e("p",[e("code",[t._v("for-each")]),t._v(" 문을 사용할 수 없는 경우는 다음과 같다.")]),t._v(" "),e("ul",[e("li",[t._v("파괴적인 필터링 (destructive filtering)\n"),e("ul",[e("li",[t._v("컬렉션을 순회하면서 선택된 원소를 제거해야 한다면 반복자의 remove 메서드를 호출해야 한다.")]),t._v(" "),e("li",[e("code",[t._v("Java SE 8")]),t._v(" 부터는 Collection 의 removeIf 메서드를 사용하여 컬렉션을 명시적으로 순회하는 일을 피할수 있다.")])])]),t._v(" "),e("li",[t._v("변형 (transforming)\n"),e("ul",[e("li",[t._v("리스트나 배열을 순회하면서 그 원소의 값 일부 혹은 전체를 교체해야 한다면 리스트의 반복자나 배열의 인덱스를 활용해야 한다.")])])]),t._v(" "),e("li",[t._v("병렬 반복 (parallel iteration)\n"),e("ul",[e("li",[t._v("여러 컬렉션을 병렬로 순회해야 한다면 각각의 반복자와 인덱스 변수를 사용하여 엄격하고 명시적으로 제어해야 한다.")])])])]),t._v(" "),e("p",[e("code",[t._v("for-each")]),t._v(" 문은 컬렉션과 배열을 물론 Interable 인터페이스를 구현한 객체라면 순회 가능하다.")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterable")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Iterable 을 처음부터 구현하기는 까다롭지만 원소들의 묶음을 표한하는 타입을 작성해야 한다면 Iterable 을 구현하는 쪽으로 고민하도록 하자")])])},[],!1,null,null,null);a.default=r.exports}}]);