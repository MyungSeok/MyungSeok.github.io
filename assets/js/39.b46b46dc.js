(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{355:function(t,v,_){"use strict";_.r(v);var r=_(1),a=Object(r.a)({},function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"design-pattern-이란"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#design-pattern-이란","aria-hidden":"true"}},[t._v("#")]),t._v(" Design Pattern 이란?")]),t._v(" "),_("p",[_("em",[_("strong",[t._v("객체 지향 관점에서의 오브젝트의 의존관계를 다루는 방법")])]),t._v(" 이다.")]),t._v(" "),_("p",[t._v("이는 상황에 따른 요구사항의 문제를 빠르게 해결할 수 있도록 설계를 도와주며 "),_("em",[_("strong",[t._v("런타임시에 바뀔수 있는 상속관계보다 더 동적")])]),t._v(" 이다.")]),t._v(" "),_("p",[t._v("이 Design Pattern 은 "),_("strong",[t._v("Scope")]),t._v(" 관점과 "),_("strong",[t._v("Purpose")]),t._v(" 관점에 따라 나뉘게 되며 해당 관점에 따라 더욱 세분화 된다.")]),t._v(" "),_("p",[_("img",{attrs:{src:"/img/A077.png",alt:'"Java Design Pattern Table"'}})]),t._v(" "),_("h2",{attrs:{id:"생성관련-패턴"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#생성관련-패턴","aria-hidden":"true"}},[t._v("#")]),t._v(" 생성관련 패턴")]),t._v(" "),_("p",[t._v("객체 인스턴스 생성을 위한 패턴")]),t._v(" "),_("ul",[_("li",[t._v("Singleton (싱글톤)")]),t._v(" "),_("li",[t._v("Prototype (프로토타입)")]),t._v(" "),_("li",[t._v("빌더")]),t._v(" "),_("li",[t._v("추상 팩토리")])]),t._v(" "),_("h2",{attrs:{id:"행동관련-패턴"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#행동관련-패턴","aria-hidden":"true"}},[t._v("#")]),t._v(" 행동관련 패턴")]),t._v(" "),_("p",[t._v("클래스와 객체들이 상호작용하는 방법 및 역활을 분담")]),t._v(" "),_("ul",[_("li",[t._v("Strategy (전략)")]),t._v(" "),_("li",[t._v("옵저버")]),t._v(" "),_("li",[t._v("스테이트")]),t._v(" "),_("li",[t._v("커맨드")]),t._v(" "),_("li",[t._v("이터레이터")]),t._v(" "),_("li",[t._v("템플릿 메소드")]),t._v(" "),_("li",[t._v("인터프리터")]),t._v(" "),_("li",[t._v("미디에이터")]),t._v(" "),_("li",[t._v("역활변경")]),t._v(" "),_("li",[t._v("메멘토")]),t._v(" "),_("li",[t._v("비지터")])]),t._v(" "),_("h2",{attrs:{id:"구조관련-패턴"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#구조관련-패턴","aria-hidden":"true"}},[t._v("#")]),t._v(" 구조관련 패턴")]),t._v(" "),_("ul",[_("li",[t._v("데토레이터")]),t._v(" "),_("li",[t._v("어댑터")]),t._v(" "),_("li",[t._v("컴포지트")]),t._v(" "),_("li",[t._v("퍼사드")]),t._v(" "),_("li",[t._v("프록시")]),t._v(" "),_("li",[t._v("브릿지")]),t._v(" "),_("li",[t._v("플라이웨이트")])]),t._v(" "),_("p",[t._v("클래스와 객체들의 구성을 통해서 더 큰 구조로 확장 가능한 패턴")]),t._v(" "),_("p",[_("img",{attrs:{src:"/img/A015.png",alt:'"Java Design Pattern Map"'}})]),t._v(" "),_("div",{staticClass:"tip custom-block"},[_("p",{staticClass:"custom-block-title"},[t._v("참고자료")]),t._v(" "),_("p",[_("a",{attrs:{href:"https://brunch.co.kr/@springboot/31",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://brunch.co.kr/@springboot/31"),_("OutboundLink")],1)])])])},[],!1,null,null,null);v.default=a.exports}}]);