(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{344:function(t,a,r){"use strict";r.r(a);var i=r(1),e=Object(i.a)({},function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"object-oriented-programming"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#object-oriented-programming","aria-hidden":"true"}},[t._v("#")]),t._v(" Object Oriented Programming")]),t._v(" "),r("p",[t._v("객체 지향 프로그래밍 (OOP : Object Oriented Programming) 는 프로그램이 더 나은 방향으로 나아가기 위한 개발 방법론으로 대표적으로는 다음과 같은 장점을 예를 들수 있다.")]),t._v(" "),r("ul",[r("li",[t._v("모듈단위의 유지보수 및 수정이 가능한 코드의 개발")]),t._v(" "),r("li",[t._v("재사용이 가능한 코드")]),t._v(" "),r("li",[t._v("향상된 코드의 안정성과 유연성")]),t._v(" "),r("li",[t._v("코드에 대한 높은 이해도")])]),t._v(" "),r("p",[t._v("이는 아래의 각각의 대표적 특징으로 인해 나타나는 장점들이다.")]),t._v(" "),r("h2",{attrs:{id:"다형성-polymorphism"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#다형성-polymorphism","aria-hidden":"true"}},[t._v("#")]),t._v(" 다형성 (Polymorphism)")]),t._v(" "),r("p",[t._v("하나의 객체를 여러 타입으로 나타내게 하여 다양한 기능으로 이용할 수 있도록 하는것이다."),r("br"),t._v("\n다형성은 코드의 유연하며 재사용이 가능하도록 구현되며 대표적으로 "),r("code",[t._v("Overloading")]),t._v(" 과 "),r("code",[t._v("Overriding")]),t._v(" 이 있다.")]),t._v(" "),r("h2",{attrs:{id:"상속-inheritance"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#상속-inheritance","aria-hidden":"true"}},[t._v("#")]),t._v(" 상속 (Inheritance)")]),t._v(" "),r("p",[t._v("기존의 클래스를 재 사용하여 새로운 클래스로 작성하는 것"),r("br"),t._v("\n코드를 재사용하여 새로운 클래스로 작성할 수 있으며 다형성을 구현한 것이다.")]),t._v(" "),r("h2",{attrs:{id:"캡슐화-encapsulation"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#캡슐화-encapsulation","aria-hidden":"true"}},[t._v("#")]),t._v(" 캡슐화 (Encapsulation)")]),t._v(" "),r("p",[t._v("객체를 내부를 외부에서 접근을 제한함으로써 이를 보호하는 것을 말한다."),r("br"),t._v("\n이는 정보의 은닉화 때문이며 반드시 객체에 사용한 부분만 일부 노출을 하는 인터페이스 역활만을 노출한다.")]),t._v(" "),r("p",[t._v("객체의 동작으로 독립적으로 변경하거나 확장이 가능하여 코드의 가용성과 유지관리가 향상된다."),r("br"),t._v("\n객체가 원하지 않는 방식으로 상호작용 하는것을 방지하여 모듈성을 향상 시킨다.")]),t._v(" "),r("h2",{attrs:{id:"오버로딩-overloading"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#오버로딩-overloading","aria-hidden":"true"}},[t._v("#")]),t._v(" 오버로딩 (Overloading)")]),t._v(" "),r("p",[t._v("같은 이름의 함수를 여러개 정의하고 매개변수의 유형과 개수를 다르게 하여 다양한 유형의 호출에 응답")]),t._v(" "),r("h2",{attrs:{id:"오버라이딩-overriding"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#오버라이딩-overriding","aria-hidden":"true"}},[t._v("#")]),t._v(" 오버라이딩 (Overriding)")]),t._v(" "),r("p",[t._v("상의 클래스가 가지고 있는 메소드를 하위 클래스가 "),r("em",[r("strong",[t._v("재 정의")])]),t._v(" 하여 사용하는 것"),r("br"),t._v("\n어떤 메소드가 실행될지는 "),r("em",[r("strong",[t._v("Dynamic Dispatch (동적 디스패치)")])]),t._v(" 가 일어나며 확인 가능하다.")]),t._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",{staticClass:"custom-block-title"},[t._v("Dispatch ?")]),t._v(" "),r("ul",[r("li",[t._v("Static Dispatch\n"),r("ul",[r("li",[t._v("컴파일 시점에서는 알 수 있다.")])])]),t._v(" "),r("li",[t._v("Dynamic Dispatch\n"),r("ul",[r("li",[t._v("런타임 순간에 알 수 있다.")])])])])])])},[],!1,null,null,null);a.default=e.exports}}]);