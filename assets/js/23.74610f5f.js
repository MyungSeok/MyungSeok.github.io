(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{358:function(e,t,a){"use strict";a.r(t);var r=a(1),s=Object(r.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"큐-queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#큐-queue","aria-hidden":"true"}},[e._v("#")]),e._v(" 큐 (Queue)")]),e._v(" "),a("ul",[a("li",[e._v("처음에 저장한 데이터를 가장 먼저 꺼내는 선입선출 (FIFO : First In First Out) 구조로 되어 있다.")]),e._v(" "),a("li",[e._v("입출력이 양방향에서 이루어지는 데이터 구조이다.")]),e._v(" "),a("li",[e._v("삽입 연산을 "),a("em",[a("strong",[e._v("Enqueue")])]),e._v(" 삭제 연산을 "),a("em",[a("strong",[e._v("Dequeue")])]),e._v(" 라고 한다.")])]),e._v(" "),a("h2",{attrs:{id:"단점"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#단점","aria-hidden":"true"}},[e._v("#")]),e._v(" 단점")]),e._v(" "),a("ul",[a("li",[e._v("데이터 삽입 후 계속 항목 삭제를 하면 REAR 와 FRONT 가 만나게 되어 공백 Queue 가 됨에도 불구하고 오버 플로우 현상이 생겨 메모리낭비 현상이 생기게 된다.")])]),e._v(" "),a("h2",{attrs:{id:"용도"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#용도","aria-hidden":"true"}},[e._v("#")]),e._v(" 용도")]),e._v(" "),a("ul",[a("li",[e._v("OS 의 작업 스케쥴링")]),e._v(" "),a("li",[e._v("대기행렬 처리")])]),e._v(" "),a("h2",{attrs:{id:"유의사항"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#유의사항","aria-hidden":"true"}},[e._v("#")]),e._v(" 유의사항")]),e._v(" "),a("p",[e._v("Queue 에서 데이터를 추출할 때는 첫번째 저장된 데이터를 삭제하므로 배열리스트와 같은 배열 기반 "),a("code",[e._v("Collection Class")]),e._v(" 를 사용하면 데이터를 꺼낼때마다 빈공간을 채우기 위해 데이터의 복사가 발생한다.")]),e._v(" "),a("p",[e._v("이는 성능저하를 야기 시키기 때문에 "),a("em",[a("strong",[e._v("연결 리스트 (Linked List) 로 구현")])]),e._v(" 하는것이 적합하다.")])])},[],!1,null,null,null);t.default=s.exports}}]);