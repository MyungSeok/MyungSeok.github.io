(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{277:function(t,a,r){"use strict";r.r(a);var e=r(1),v=Object(e.a)({},function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"design-pattern-이란"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#design-pattern-이란","aria-hidden":"true"}},[t._v("#")]),t._v(" Design Pattern 이란?")]),t._v(" "),r("p",[r("em",[r("strong",[t._v("객체 지향 관점에서의 오브젝트의 의존관계를 다루는 방법")])]),t._v(" 이다.")]),t._v(" "),r("p",[t._v("이는 상황에 따른 요구사항의 문제를 빠르게 해결할 수 있도록 설계를 도와주며 "),r("em",[r("strong",[t._v("런타임시에 바뀔수 있는 상속관계보다 더 동적")])]),t._v(" 이다.")]),t._v(" "),r("p",[t._v("이 Design Pattern 은 "),r("strong",[t._v("Scope")]),t._v(" 관점과 "),r("strong",[t._v("Purpose")]),t._v(" 관점에 따라 나뉘게 되며 해당 관점에 따라 더욱 세분화 된다.")]),t._v(" "),r("p",[r("img",{attrs:{src:"/img/A077.png",alt:'"Java Design Pattern Table"'}})]),t._v(" "),r("h2",{attrs:{id:"생성관련-패턴"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#생성관련-패턴","aria-hidden":"true"}},[t._v("#")]),t._v(" 생성관련 패턴")]),t._v(" "),r("p",[t._v("객체 인스턴스 생성을 위한 패턴")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"./creational/factory-method"}},[t._v("팩토리 메서드 (Factory Method)")])]),t._v(" "),r("li",[r("a",{attrs:{href:"./creational/singleton"}},[t._v("싱글톤 (Singleton)")])]),t._v(" "),r("li",[t._v("추상 팩토리")]),t._v(" "),r("li",[t._v("프로토타입")]),t._v(" "),r("li",[t._v("빌더")])]),t._v(" "),r("h2",{attrs:{id:"구조관련-패턴"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#구조관련-패턴","aria-hidden":"true"}},[t._v("#")]),t._v(" 구조관련 패턴")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"./structural/adapter"}},[t._v("어댑터 (Adapter)")])]),t._v(" "),r("li",[r("a",{attrs:{href:"./structural/decorator"}},[t._v("데코레이터 (Decorator)")])]),t._v(" "),r("li",[r("a",{attrs:{href:"./structural/proxy"}},[t._v("프록시 (Proxy)")])]),t._v(" "),r("li",[t._v("컴포지트")]),t._v(" "),r("li",[t._v("퍼사드")]),t._v(" "),r("li",[t._v("브릿지")])]),t._v(" "),r("h2",{attrs:{id:"행동관련-패턴"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#행동관련-패턴","aria-hidden":"true"}},[t._v("#")]),t._v(" 행동관련 패턴")]),t._v(" "),r("p",[t._v("클래스와 객체들이 상호작용하는 방법 및 역활을 분담")]),t._v(" "),r("ul",[r("li",[t._v("인터프리터")]),t._v(" "),r("li",[r("a",{attrs:{href:"./behavioral/template-method"}},[t._v("템플릿 메소드(Template Method)")])]),t._v(" "),r("li",[r("a",{attrs:{href:"./behavioral/strategy"}},[t._v("전략 (Strategy)")])]),t._v(" "),r("li",[r("a",{attrs:{href:"./behavioral/state"}},[t._v("행동 (State)")])]),t._v(" "),r("li",[r("a",{attrs:{href:"./behavioral/visitor"}},[t._v("방문자 (Visitor)")])]),t._v(" "),r("li",[t._v("커맨드")]),t._v(" "),r("li",[t._v("역활변경")]),t._v(" "),r("li",[t._v("이터레이터")]),t._v(" "),r("li",[t._v("미디에이터")]),t._v(" "),r("li",[t._v("메멘토")]),t._v(" "),r("li",[t._v("플라이웨이트")]),t._v(" "),r("li",[t._v("옵저버")])]),t._v(" "),r("p",[t._v("클래스와 객체들의 구성을 통해서 더 큰 구조로 확장 가능한 패턴")]),t._v(" "),r("p",[r("img",{attrs:{src:"/img/A015.png",alt:'"Java Design Pattern Map"'}})]),t._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",{staticClass:"custom-block-title"},[t._v("참고자료")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://brunch.co.kr/@springboot/31",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://brunch.co.kr/@springboot/31"),r("OutboundLink")],1)])])])},[],!1,null,null,null);a.default=v.exports}}]);