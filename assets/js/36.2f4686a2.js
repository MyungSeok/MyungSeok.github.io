(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{318:function(n,t,e){"use strict";e.r(t);var r=e(1),v=Object(r.a)({},function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"di"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#di","aria-hidden":"true"}},[n._v("#")]),n._v(" DI")]),n._v(" "),e("p",[n._v("스프링을 사용하는 가장 큰 이유중의 하나이다.")]),n._v(" "),e("p",[n._v("모든 프로그래밍의 원칙중에 가장 효율적인 재사용성을 위해 중복되는 코드를 줄이고 변경보단 확장에 용이하게끔 하는 OCP 와 같은 원칙들이 있다.")]),n._v(" "),e("p",[n._v("이는 스프링에서 관점지향 프로그래밍 (AOP) 방식에 따라 인프라 코드와 비지니스 코드 2가지 코드로 나뉘게 된다.")]),n._v(" "),e("p",[n._v("인프라 코드는 로깅, 보안, 인증 등과같이 어플리케이션이 동작되는데 필요한 재사용이 가능한 공통 코드들을 모아 놓고"),e("br"),n._v("\n사용자가 직접 작성하는 서비스와 같은 비지니스성 코드들을 작성하는데 집중할수 있도록 도와준다.")]),n._v(" "),e("p",[n._v("일반적으로 프로그래밍 코드의 흐름은 애플리케이션 코드에서 주체적으로 동작되는데 스프링에서는 이 흐름의 주체가 프레임워크로 뒤바뀌는 현상이 일어난다."),e("br"),n._v("\n이를 제어의 역전 (IoC : Inversion of Controll) 이라고 하며 프레임워크에서 사용자의 코드를 소비하는 형태로 흐름이 진행된다.")]),n._v(" "),e("p",[n._v("이를 통해 사용자의 코드는 프레임워크에서 의존성을 가지게 되며 이러한 의존성은 스프링 컨테이너가 자동적으로 연결해주게 되는데 이를 DI (Depandency Injection) 라고 한다.")]),n._v(" "),e("p",[n._v("이는 스프링이 생각하는대로 프로그램 코드를 작성하게 되면 자연히 Depandency Injection 을 따르게 끔 되어 있다.")])])},[],!1,null,null,null);t.default=v.exports}}]);