(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{375:function(t,a,s){"use strict";s.r(a);var n=s(1),e=Object(n.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"polymorphism"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#polymorphism","aria-hidden":"true"}},[t._v("#")]),t._v(" Polymorphism")]),t._v(" "),s("p",[t._v("Java 의 Polymorphism (다형성) 은 하나의 객체를 여러 타입으로 나타내게 하여 다양한 기능으로 이용할 수 있도록 하는것이다.")]),t._v(" "),s("p",[t._v("이는 코드의 유연하며 재사용이 가능하도록 구현되며 크게 Dispatch 방법에 따라 Static Dispatch 와 Dynamic Dispatch 로 나뉜다.")]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("Dispatch 란?")]),t._v(" "),s("p",[t._v("프로그램이 어떤 메서드를 호출할 것인가를 결정하여 그것을 실행하는 과정을 말한다.")])]),t._v(" "),s("h2",{attrs:{id:"static-dispatch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#static-dispatch","aria-hidden":"true"}},[t._v("#")]),t._v(" Static Dispatch")]),t._v(" "),s("p",[t._v("Static Dispatch 는 프로그램이 컴파일 시점에 알수 있으며 대표적으로 Method Overriding 이 있다.")]),t._v(" "),s("p",[s("strong",[t._v("Method Overloading")])]),t._v(" "),s("p",[t._v("같은 이름의 메서드를 여러개 정의하고 매개변수의 유형과 개수를 다르게 하여 다양한 유형의 호출에 응답하는 방법이다.")]),t._v(" "),s("p",[t._v("이는 "),s("em",[s("strong",[t._v("Function Signature 를 다르게 하여 사용하는 방법")])]),t._v(" 으로 Method Signature 가 동일하면 사용이 불가하다.")]),t._v(" "),s("p",[s("strong",[t._v("Method Signature")])]),t._v(" "),s("p",[t._v("메서드의 이름 (Method Name) 과 매개변수의 타입 (Parameter Types) 이 같으면 메서드 시그니쳐가 같다고 한다.")]),t._v(" "),s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("반환값의 타입 (Return Type) 은 메서드 시그니쳐에 포함되지 않는다.")])]),t._v(" "),s("p",[s("strong",[t._v("Function Signature")])]),t._v(" "),s("p",[t._v("함수의 원형에 명시되는 매개변수의 리스트를 가르킨다."),s("br"),t._v("\n두 함수의 "),s("em",[s("strong",[t._v("매개변수의 갯수")])]),t._v(" 와 "),s("em",[s("strong",[t._v("타입")])]),t._v(" 이 같으면 두 함수의 시그니처는 같다고 할 수 있습니다.")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sum "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" sum2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("위 두 함수의 시그니처가 같다."),s("br"),t._v("\n시그니처가 같은 함수는 같은 함수 포인터에 의해 상호호환이 가능하다.")]),t._v(" "),s("h2",{attrs:{id:"dynamic-dispatch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-dispatch","aria-hidden":"true"}},[t._v("#")]),t._v(" Dynamic Dispatch")]),t._v(" "),s("p",[s("strong",[t._v("Method Overriding")])]),t._v(" "),s("p",[t._v("상의 클래스가 가지고 있는 메소드를 하위 클래스가 "),s("em",[s("strong",[t._v("재 정의")])]),t._v(" 하여 사용하는 것")])])},[],!1,null,null,null);a.default=e.exports}}]);