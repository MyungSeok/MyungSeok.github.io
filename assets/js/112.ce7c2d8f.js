(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{373:function(t,a,s){"use strict";s.r(a);var e=s(1),n=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"동기화-synchronizred"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#동기화-synchronizred","aria-hidden":"true"}},[t._v("#")]),t._v(" 동기화 (Synchronizred)")]),t._v(" "),s("p",[t._v("Java 에서 동기화 영역은 "),s("code",[t._v("synchronizred")]),t._v(" 키워드로 표시된다.")]),t._v(" "),s("p",[t._v("동기화는 객체에 대한 동기화로 이루어지는데 여러 Thread 가 한 개의 자원을 사용하고자 할 때 해당 Thread 만 제외하고 나머지 Thread 의 접근을 막는 방법이다."),s("br"),t._v("\n블록에 접근을 시도하는 "),s("em",[s("strong",[t._v("다른 Thread 들은 블록 안의 Thread 가 실행을 마치고 블록을 벗어날때까지 차단 (blocked) 상태")])]),t._v(" 가 된다.")]),t._v(" "),s("p",[t._v("대표적으로 "),s("em",[s("strong",[t._v("Log Files")])]),t._v(" 과 같이 서로 다른 프로세스에 접근 가능한 리소스를 대상으로 사용할때 효과적이다.")]),t._v(" "),s("blockquote",[s("p",[t._v("이러한 방식을 "),s("em",[s("strong",[t._v("배타적 접근")])]),t._v(" 이라고 한다.")])]),t._v(" "),s("h2",{attrs:{id:"장점"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#장점","aria-hidden":"true"}},[t._v("#")]),t._v(" 장점")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("thread-safe")]),t._v(" 하게 사용이 가능하여 사용자의 의도대로 프로그램의 흐름 제어가 가능하다.")])]),t._v(" "),s("h2",{attrs:{id:"단점"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#단점","aria-hidden":"true"}},[t._v("#")]),t._v(" 단점")]),t._v(" "),s("ul",[s("li",[t._v("프로그램의 성능저하를 일으킬 수 있다.\n"),s("ul",[s("li",[t._v("Java 내부적으로 메서드나 변수에 동기화를 하기 위해 "),s("code",[t._v("block")]),t._v(" & "),s("code",[t._v("unblock")]),t._v(" 처리를 하게되는데 이런 처리들을 통하여 소비되는 리소스가 프로그램 전반적인 성능에 영향을 준다.")])])])]),t._v(" "),s("p",[s("code",[t._v("synchronized")]),t._v(" 키워드는 다음 네가지 유형의 블록이 쓰인다.")]),t._v(" "),s("h2",{attrs:{id:"syntax"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#syntax","aria-hidden":"true"}},[t._v("#")]),t._v(" Syntax")]),t._v(" "),s("h3",{attrs:{id:"인스턴스-메소드에-동기화-적용-instance-method"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#인스턴스-메소드에-동기화-적용-instance-method","aria-hidden":"true"}},[t._v("#")]),t._v(" 인스턴스 메소드에 동기화 적용 (Instance Method)")]),t._v(" "),s("p",[s("em",[s("strong",[t._v("특정 부분에 대해서만 동기화를 동기화를 할 필요가 있을 경우")])]),t._v(" 아래 메소드와 같이"),s("br"),t._v("\n선언문에 있는 "),s("code",[t._v("synchronized")]),t._v(" 키워드를 통하여 동기화를 한다.")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Instance Method 의 동기화는 "),s("em",[s("strong",[t._v("이 Method 를 가진 Instance (객체) 를 기준")])]),t._v(" 으로 한다."),s("br"),t._v("\n하나의 Class 가 동기화된 Instance Method 를 가지면, 동기화는 이 Class 의 하나의 Instance 를 기준으로 이루어지며 한 시점에 오직 하나의 Thread 만이 동기화된 Instance Method 를 실행할 수 있다.")]),t._v(" "),s("blockquote",[s("p",[t._v("하나의 Instance 하나의 Thread 이다.")])]),t._v(" "),s("h3",{attrs:{id:"정적-메소드에-동기화-적용-static-method"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#정적-메소드에-동기화-적용-static-method","aria-hidden":"true"}},[t._v("#")]),t._v(" 정적 메소드에 동기화 적용 (Static Method)")]),t._v(" "),s("p",[t._v("인스턴스 메소드의 사용법과 같이 선언문에 있는 "),s("code",[t._v("synchronized")]),t._v(" 키워드를 통하여 동기화를 한다.")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Static Method 의 동기화는 "),s("em",[s("strong",[t._v("이 Method 를 가진 Class (객체) 를 기준")])]),t._v(" 으로 한다."),s("br"),t._v("\nJVM 안에 Class 객체는 Class 당 하나만 존재할 수 있으므로, 같은 Class 에 대해서는 오직 한 Thread 에만 동기화된 Static Method 를 실행할 수 있다.")]),t._v(" "),s("blockquote",[s("p",[t._v("하나의 Class 당 하나의 Thread 이다.")])]),t._v(" "),s("h3",{attrs:{id:"인스턴스-메소드-안에-동기화-적용-instance-method-codeblock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#인스턴스-메소드-안에-동기화-적용-instance-method-codeblock","aria-hidden":"true"}},[t._v("#")]),t._v(" 인스턴스 메소드 안에 동기화 적용 (Instance Method Codeblock)")]),t._v(" "),s("p",[t._v("동기화를 메소드 전체에 적용하는것이 아닌 메소드의 특정 부분에 적용하는것이 효율적일 때가 있다.")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"정적-메소드에-안에-동기화-적용-static-method-codeblock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#정적-메소드에-안에-동기화-적용-static-method-codeblock","aria-hidden":"true"}},[t._v("#")]),t._v(" 정적 메소드에 안에 동기화 적용 (Static Method Codeblock)")]),t._v(" "),s("p",[s("em",[s("strong",[t._v("Instance Method Codeblock")])]),t._v(" 과 사용법은 동일하다.")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("blockquote",[s("h3",{attrs:{id:"참고자료"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#참고자료","aria-hidden":"true"}},[t._v("#")]),t._v(" 참고자료")]),t._v(" "),s("p",[s("a",{attrs:{href:"http://parkcheolu.tistory.com/15",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://parkcheolu.tistory.com/15"),s("OutboundLink")],1)])])])},[],!1,null,null,null);a.default=n.exports}}]);