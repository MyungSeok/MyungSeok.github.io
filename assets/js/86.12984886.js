(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{428:function(t,a,e){"use strict";e.r(a);var s=e(1),n=Object(s.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"method-reference"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#method-reference","aria-hidden":"true"}},[t._v("#")]),t._v(" Method Reference")]),t._v(" "),e("p",[t._v("아래와 같이 사용하며 해당 클래스에 (인스턴스) 메서드를 "),e("code",[t._v("::")]),t._v(" 으로 붙여서 사용한다.")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Instance")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Method")]),t._v("\n")])])]),e("p",[t._v("Method 의 Reference 를 전달하는다는 의미이기 때문에 Lamda 보다 축약된 문법이다.")]),t._v(" "),e("p",[t._v("Java 의 Method 는 일급 객체가 아니기 때문에 객체의 Reference 를 전달하는 방식으로 동작된다.")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" func "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[e("code",[t._v("Function")]),t._v(" 인터페이스는 하나의 인자를 받아 다른타입의 리턴 타입을 갖는 "),e("code",[t._v("apply()")]),t._v(" Method 를 갖고 있는 함수형 인터페이스이다.")]),t._v(" "),e("p",[t._v("위 코드를 아래와 같이 Method Reference 형태로 바꿔서 사용 가능하다.")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" func "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" f"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("또한 아래와 같이 선언적 코딩을 통하여 간략화 할 수 있다.")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" func "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEmpty")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),t._v(" result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" func"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[e("code",[t._v("isEmpty()")]),t._v(" 는 static method 는 아니지만 인자로 놈어오는 타입이 "),e("code",[t._v("String")]),t._v(" 이기 때문에 해당 타입의 메서드를 호출해준다.")]),t._v(" "),e("h2",{attrs:{id:"레퍼런스별-타입-추론-type-inference-방법"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#레퍼런스별-타입-추론-type-inference-방법","aria-hidden":"true"}},[t._v("#")]),t._v(" 레퍼런스별 타입 추론 (Type Inference) 방법")]),t._v(" "),e("ul",[e("li",[t._v("Static Method Reference")])]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" func "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" func"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[t._v("Instance Method Reference")])]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" func "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEmpty")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),t._v(" result "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" func"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[t._v("Constructor Method Reference")])]),t._v(" "),e("p",[t._v("생성자도 메서드 레퍼런스로 작성 가능하다.")]),t._v(" "),e("p",[e("code",[t._v("Supplier")]),t._v(" 는 인자 없이 "),e("code",[t._v("return")]),t._v(" 만 하는 메서드를 가지고 있으며 메서드 호출시 "),e("code",[t._v("new")]),t._v(" 로 생성된 "),e("code",[t._v("String")]),t._v(" 객체를 리턴한다."),e("br"),t._v("\n이는 물론 기본 생성자를 호출하게 된다.")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Supplier")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ul",[e("li",[t._v("바깥 인스턴스 메서드 레퍼런스")])]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Predicate")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" pre "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" str"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\npre"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"world"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparator")]),e("span",{pre:!0,attrs:{class:"token generics"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" compare "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareTo")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[e("strong",[t._v("자주 사용하는 함수형 인터페이스")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("Functional Interface")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Parameter Type")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Return Type")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Abstract Method")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Description")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("Other Method")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Runnable")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("없음")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("void")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("run")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("인자나 반환 값 없이 액션을 수행한다.")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("없음")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Supplier")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("없음")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("T")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("get")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("T")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("타입 값을 공급한다.")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Consumer")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("T")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("void")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("accept")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("T")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("타입 값을 소비한다.")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("BiConsumer<T, U>")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("T, U")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("void")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("accept")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("T와 U타입 값을 소비한다.")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("andThen")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Function<T, R>")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("T, R")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("apply")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("T")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("타입 인자를 받는 함수다.")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("compose"),e("br"),t._v("andThen"),e("br"),t._v("identity")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("BiFunction<T, U, R>")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("T, U, R")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("apply")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("T와 U타입 인자를 받는 함수다.")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("andThen")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("UnaryOperator")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("T")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("T")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("apply")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("T 타입에 적용하는 단항 연산자다.")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("compose"),e("br"),t._v("andThen"),e("br"),t._v("identity")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("BinaryOperator")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("T, T")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("T")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("apply")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("T 타입에 적용하는 이항 연산자다.")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("andThen"),e("br"),t._v("maxBy"),e("br"),t._v("minBy")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("Predicate")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("T")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("test")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Boolean 값을 반환하는 함수다.")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("and"),e("br"),t._v("or"),e("br"),t._v("negate"),e("br"),t._v("isEqual")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("BiPredicate<T, U>")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("T, U")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("test")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("두 가지 인자를 받고 boolean 값을 반환하는 함수다.")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("and"),e("br"),t._v("or"),e("br"),t._v("negate")])])])]),t._v(" "),e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("참고자료")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://multifrontgarden.tistory.com/126",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://multifrontgarden.tistory.com/126"),e("OutboundLink")],1),e("br"),t._v(" "),e("a",{attrs:{href:"https://imcts.github.io/java-method-reference/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://imcts.github.io/java-method-reference/"),e("OutboundLink")],1),e("br"),t._v(" "),e("a",{attrs:{href:"https://palpit.tistory.com/675",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://palpit.tistory.com/675"),e("OutboundLink")],1)])])])},[],!1,null,null,null);a.default=n.exports}}]);